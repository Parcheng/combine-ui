window.config = {};
window.config.info = [
    "<h2>○ 参数结构：</h2>",
    "id: \"table_demo_1\",    【 该Module的ID，可通过 getConfig() 获取配置参数对象等 】",
    "search: {    【 查询模块配置对象，默认无 】",
    "    id: \"\" ,    【 可配置，默认无 】",
    "    show: true ,    【 默认是否显示筛选条件栏，默认true。提示：设置成false后需要点击展开才会显示 】",
    "    form: {    【 表单配置对象。提示：此处引用的Part中Form组件 】",
    "        id: - ,    【 不可配置，默认为search的ID 】",
    "        col: 3,",
    "        elements: [",
    "            { key: \"search.name\", title: \"名称\", type: \"text\", default: \"请输入名称\", },",
    "            { ",
    "                key: \"type\", title: \"类型\", type: \"select\", children:[], ",
    "                load: {    【 下拉框数据加载对象，提示：也可以用于radio和checkbox类型 】",
    "                    url: \"...\",    【 请求数据的接口地址 】",
    "                    params: { ... },    【 请求参数 】",
    "                    text: \"name\",    【 下拉框显示的文本所对应数据的字段名 】",
    "                    value: \"code\"    【 下拉框value值所对应数据的字段名 】",
    "                }",
    "            }",
    "            ......",
    "        ]",
    "    },",
    "    buttons: [    【 按钮组配置对象。提示：此处引用的Part中Buttons组件 】",
    "        id: - ,    【 不可配置，默认为search的ID 】",
    "        buttons: [ ",
    "            { ",
    "                id: \"finish\", text: \"按钮事件测试\" ",
    "                fn: function(){ ... }    【 按钮单击事件，this对象：{ button: 当前按钮对象, module: module配置对象 } 】",
    "            },{ ",
    "                id: \"finish\", text: \"搜索\" ",
    "                fn: \"query\"    【 内置函数query，功能：执行list.load配置查询。可选内置函数：query } 】",
    "            },",
    "            ......",
    "        ],",
    "        call: - ,    【 不可配置，组件内部设置了click事件 】",
    "    ]",
    "},",
    "tool: [    【 工具条模块配置对象，默认无。提示：此处引用的Part中Buttons组件，可以直接简写成tool:[...] 】",
    "    id: - ,    【 不可配置，默认为该Module的ID 】",
    "    buttons: [ ",
    "        { ",
    "            id: \"finish\", text: \"工具栏按钮事件测试\" ",
    "            fn: function(){ ... }    【 按钮单击事件，this对象：{ button: 当前按钮对象, module: module配置对象 } 】",
    "        },{ ",
    "            id: \"finish\", text: \"添加\" ",
    "            fn: \"openWindow\",    【 内置函数linkTo，功能：打开window配置对象中配置的窗口。可选内置函数：openWindow|edit|dels|checkAll 】",
    "            to: \"add\"    【 配置openWindow要打开的窗口，与windows配置对象的属性名相对应 】",
    "        },{ ",
    "            id: \"finish\", text: \"批量删除\" ",
    "            fn: \"dels\",    【 内置函数dels，功能：跳转到指定页面。注意：目前仅对Table组件生效 】",
    "            url: \"...\",    【 配置删除数据接口地址 】",
    "            paramKeys: [\"name\",\"count\"]    【 配置提交到接口的参数名称，参数值会自动从该项数据中取 】",
    "        },{ ",
    "            id: \"finish\", text: \"全选\" ",
    "            fn: \"checkAll\",    【 内置函数checkAll，功能：全选。注意：目前仅对Table组件生效 】",
    "        }",
    "        ......",
    "    ],",
    "    call: - ,    【 不可配置，组件内部设置了click事件 】",
    "]",
    "table: {    【 表格数据模块配置对象。提示：此处引用的Part中Table组件 】",
    "    id: - ,    【 不可配置，默认为该Module的ID 】",
    "    showIndex: true,",
    "    showCheck: true,",
    "    align: \"center\",",
    "    bodyAlign: \"left\",",
    "    header: {    【 表头配置。注意：属性名要与Load得到的数据对象的字段名相符 】",
    "        name: \"名称\", type: \"类型\", count: \"点击量\", mark: \"备注\" ",
    "    },",
    "    operations: {    【 数据操作配置对象，在表格每行末尾一列显示操作按钮 】",
    "        test: {    【 对象名称可自由定义 】",
    "            name: \"测试\",  ",
    "            fn: function(){ ... }    【 操作项单击事件，this对象：{ operation: 当前operation项对象, data:当前行数据, module: module配置对象 } 】",
    "        },",
    "        linkTo: {",
    "            name: \"跳转\",  ",
    "            fn: \"linkTo\",    【 内置函数linkTo，功能：跳转到指定页面。可选内置函数：linkTo|openWindow|del 】",
    "            url: \"https://www.baidu.com\",    【 配置linkTo跳转到的URL 】",
    "            urlParams: [\"name\",\"count\"]    【 配置linkTo跳转到的URL所带的参数名称，参数值会自动从该项数据中取 】",
    "        },",
    "        update: {",
    "            name: \"修改\",  ",
    "            fn: \"openWindow\",    【 内置函数openWindow，功能：打开window配置对象中配置的窗口 】",
    "            to: \"update\",    【 配置openWindow要打开的窗口，与windows配置对象的属性名相对应 】",
    "            init: true    【 是否初始化数据（将table数据填入window表单中），默认true 】",
    "        },",
    "        del: {",
    "            name: \"删除\",  ",
    "            fn: \"del\",    【 内置函数del，功能：调用删除数据接口 】",
    "            url: \"...\",    【 配置删除数据接口地址 】",
    "            paramKeys: [\"name\",\"count\"]    【 配置提交到接口的参数名称，参数值会自动从该项数据中取 】",
    "        }",
    "    },",
    "    load: {    【 数据加载配置对象。注意：该配置对象仅在module的组件中才可以使用 】",
    "        url: \"./data/tableData.json\",    【 数据请求URL 】",
    "        type: \"GET\",    【 请求类型。可选值：GET|POST 】",
    "        params: {},    【 请求参数，提示：请求URL时会自动将search表单中填写的查询添加加载到此对象中 】",
    "    },",
    "    body: [    【 表格内容配置对象数组。注意：当配置了数据加载对象，该对象配置的内容会被加载的数据覆盖 】",
    "        { name: \"...\", type: \"...\", count: \"...\", mark: \"...\" },",
    "        ......",
    "    ],",
    "    call: {      【 事件回调对象 】",
    "        dblclick:{      【 行双击事件回调对象，如果没有自定义参数，可简写成click: function(){ ...... } 】",
    "            fn: function(param){  ....  },      【 行双击事件回调函数，可选值：函数|函数路径字符串。this：{ tableId: 表格ID, index: 行索引, data: 当前行数据 } 】",
    "            params: { val: \"test\" }      【 行双击事件回调函数参数，可选值：所有类型 】",
    "        } ",
    "    } ",
    "},",
    "page: {    【 分页配置对象。提示：此处引用的Part中Page组件，点击页码自动调用list的load函数 】",
    "    id: - ,    【 不可配置，默认为该Module的ID 】",
    "    curr: 1, maxPage: 0, showSize: 5 ",
    "    call: - ,    【 不可配置，组件内部设置了check事件 】",
    "}",
    "window: [    【 弹窗配置对象。提示：此处引用的Part中window组件 】",
    "    {    ",
    "       id: \"add\",    【 窗口ID，默认自动生成。openWindow=add 会打开此对象配置的窗口 】",
    "       title: \"添加\",    【 窗口标题栏显示文本 】",
    "       form: [    【 表单配置对象。提示：此处引用的Part中Form组件 】",
    "           { key: \"name\", title: \"名称\", type: \"text\" },",
    "           { ",
    "               key: \"type\", title: \"类型\", type: \"select\", children: [], ",
    "               load: {    【 下拉框数据加载对象，提示：也可以用于radio和checkbox类型 】",
    "                   url: \"...\",    【 请求数据的接口地址 】",
    "                   params: { ... },    【 请求参数 】",
    "                   text: \"name\",    【 下拉框显示的文本所对应数据的字段名 】",
    "                   value: \"code\"    【 下拉框value值所对应数据的字段名 】",
    "               } ",
    "           },",
    "           ......",
    "       ],",
    "       buttons: [    【 按钮组配置对象。提示：此处引用的Part中Buttons组件 】",
    "           {  ",
    "               id: \"submit\", text: \"测试\", ",
    "               fn: function(){ ... }    【 操作项单击事件，this对象：{ button: 当前按钮对象, window:当前窗口对象, module: module配置对象 } 】",
    "           }, { ",
    "               id: \"submit\", text: \"提交\", ",
    "               fn: \"save\",    【 内置函数save，功能：调用保存数据接口。可选内置函数：save 】",
    "               url: \"...\"    【 配置保存数据接口地址 】",
    "           }",
    "       ]",
    "    },",
    "    ......",
    "]",
    "",
    "<h2>○ 返回值：</h2>",
    "id: 该 Module 的 ID",
    "params: 该 Module 的配置对象（调用 build 函数传入的配置对象）",
    "config: CONF对象，需要使用 ui.build.buildModule(CONF) 函数转换成 HTML 代码",
    "",
    "<h2>○ 使用方式：</h2>",
    "var partObj = ui.module.table.build(conf);      【 参数：上述介绍的配置对象 】",
    "var partHtml = ui.build.buildModule(partObj.config);      【 将CONF对象转换成HTML代码 】",
    "$(\"#...\").html(partHtml);      【 将HTML代码插入到指定DOM中 】"

];

window.config.fns = {
    header: { t1: "函数名", t2: "使用方式", t3: "参数", t4: "返回值", t5: "描述" },
    body: [
        { t1: "getConfig", t2: "ui.modules.table.getConfig(id);", t3: "模块ID", t4: "配置参数对象", t5: "获得指定 ID 的列表模块配置参数" },
        { t1: "search.click", t2: "ui.modules.table.search.click(params);", t3: "{moduleId: 模块ID}", t4: "无", t5: "触发指定 ID 表格模块的筛选栏按钮点击事件" },
        { t1: "search.call.…", t2: "ui.modules.table.search.call.…", t3: "否", t4: "无", t5: "自定义回调函数对象，字节通过\".\"进行添加，默认包含 query 函数" },
        { t1: "tool.click", t2: "ui.modules.table.tool.click(params);", t3: "{moduleId: 模块ID}", t4: "无", t5: "触发指定 ID 表格模块的工具栏按钮点击事件" },
        { t1: "tool.call.…", t2: "ui.modules.table.tool.call.…", t3: "否", t4: "无", t5: "自定义回调函数对象，字节通过\".\"进行添加，默认包含 add、checkedAll、deleteAll 函数" },
        { t1: "table.loadData", t2: "ui.modules.table.table.loadData(params);", t3: "{moduleId: 模块ID}", t4: "无", t5: "获得指定 ID 的列表模块配置参数" },
        { t1: "table.operation", t2: "ui.modules.table.table.operation(params);", t3: "{moduleId: 模块ID}", t4: "无", t5: "触发指定 ID 表格模块的表格操作栏按钮点击事件" },
        { t1: "table.call.…", t2: "ui.modules.table.table.call.…", t3: "否", t4: "无", t5: "自定义回调函数对象，字节通过\".\"进行添加，默认包含 openWindow、delData、linkTo 函数" },
        { t1: "page.check", t2: "ui.modules.table.page.check(params);", t3: "{moduleId: 模块ID}", t4: "无", t5: "触发指定 ID 的翻页事件" },
        { t1: "windows.init", t2: "ui.modules.table.windows.init(params);", t3: "{moduleId: 模块ID}", t4: "无", t5: "初始化指定 ID 表格模块的弹窗内容" },
        { t1: "windows.click", t2: "ui.modules.table.windows.click(params);", t3: "{moduleId: 模块ID}", t4: "无", t5: "触发指定 ID 表格模块的弹窗按钮的点击事件" },
        { t1: "windows.call.…", t2: "ui.modules.table.windows.call.…", t3: "否", t4: "无", t5: "自定义回调函数对象，字节通过\".\"进行添加，默认包含 save 函数" }
    ]
};

window.config.demos = [{
    title: "示例一",
    height: 950,
    config: {
        id: "table_demo_0",
        search: {
            form: {
                col: 3,
                elements: [
                    { key: "name", title: "名称", type: "text", default: "请输入名称" },
                    { key: "type", title: "类型", type: "select", children:[],
                        load: { url: "...",  params: {}, text: "name", value: "code" }
                    }
                ]
            },
            buttons: [{ id: "finish", text: "搜索", fn: "query" }]
        },
        tool: [
            { id: "all", text: "全选", fn: "checkAll" },
            { id: "add", text: "添加", fn: "openWindow", to: "add" },
            { id: "dels", text: "批量删除", fn: "dels", url: "...", paramKeys: ["name"] }
        ],
        table: {
            showIndex: true,
            showCheck: true,
            header: { name: "名称", type: "类型", count: "点击量", mark: "备注" },
            screen: { name: "名称", type: "类型", count: "点击量", mark: "备注", other: "其他" },
            operations: {
                test: { name: "测试", fn: function () { console.log(this) } },
                update: { name: "修改", fn: "openWindow", to: "update" },
                del: { name: "删除", fn: "del", url: "...", paramKeys: ["name", "type"] },
                linkTo: { name: "跳转", fn: "linkTo", url: "https://www.baidu.com", urlParams: ["name", "type"] }
            },
            load: {
                url: "./data/tableData.json",
                type: "GET",
                params: {}
            },
            body: []
        },
        page: { curr: 1, maxPage: 10, showSize: 5 },
        windows: [
            {
                id: "add",
                title: "添加",
                form: [
                    { key: "name", title: "名称", type: "text" },
                    { key: "type", title: "类型", type: "select", children: [{ text: "厨师", value: "厨师" }] },
                    // { key: "test_1", title: "测试1", type: "select", load: { ref:"test", url:"./data/tableData.json", name: "name", value:"type" }, children: [] },
                    // { key: "test_2", title: "测试2", type: "select", load: { ref:"test" }, children: [] },
                    // { key: "test_3", title: "测试3", type: "select", load: { ref:"test" }, children: [] },
                    { key: "count", title: "点击量", type: "text" },
                    { key: "mark", title: "备注", type: "textarea" }
                ],
                buttons: [{ id: "finish", text: "提交", fn: "save", url: "..." }]
            },
            {
                id: "update",
                title: "修改",
                form: [
                    { key: "name", title: "名称", type: "text" },
                    { key: "type", title: "类型", type: "select", children: [{ text: "厨师", value: "厨师" }] },
                    { key: "count", title: "点击量", type: "text" },
                    { key: "mark", title: "备注", type: "textarea" }
                ],
                buttons: [{ id: "finish", text: "提交", fn: "save", url: "..." }]
            }
        ]
    },
    html: "<script>ui.modules.table.table.loadData({moduleId: 'table_demo_0', first: true})</script>"
}];

